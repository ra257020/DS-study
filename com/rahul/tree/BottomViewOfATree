package com.rahul.tree;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BottomViewOfATree {

	public static int horizontalDistance = 0;
	public static void main(String[] args) {
		Node<Integer> root = getTree();
		BTreePrinter.printNode(root);
		printTopView(root);
	}

	public static void printTopView(Node<Integer> root) {
		Map<Integer, Node> map = new HashMap<>();
		getHashMap(root, map);
		map.keySet().forEach(key -> System.out.print(map.get(key) + " "));
	}

	public static void getHashMap(Node<Integer> node, Map<Integer, Node> map) {
		if (node == null) {
			return;
		}
		map.put(horizontalDistance, node);
		if (node.left != null) {
			--horizontalDistance;
			getHashMap(node.left, map);
			++horizontalDistance;
		}
		if (node.right != null) {
			++horizontalDistance;
			getHashMap(node.right, map);
			--horizontalDistance;
		}
	}

	public static Node<Integer> getTree() {
		Node<Integer> root = new Node<>(1);
		root.left = new Node(2);
		root.right = new Node(3);
		root.right.left = new Node(5);
		root.right.right = new Node(6);
		root.right.left.left = new Node(7);
		root.right.left.right = new Node(8);

		return root;
	}
}

class Node<T extends Comparable<?>> {
	Node<T> left, right;
	T value;

	public Node(T data) {
		this.value = data;
	}

	public String toString() {
		if (this.value instanceof Integer) {
			Integer i = (Integer) this.value;
			return i.toString();
		}
		return super.toString();
	}
}

class BTreePrinter {

	public static <T extends Comparable<?>> void printNode(Node<T> root) {
		int maxLevel = BTreePrinter.maxLevel(root);

		printNodeInternal(Collections.singletonList(root), 1, maxLevel);
	}

	private static <T extends Comparable<?>> void printNodeInternal(List<Node<T>> nodes, int level, int maxLevel) {
		if (nodes.isEmpty() || BTreePrinter.isAllElementsNull(nodes))
			return;

		int floor = maxLevel - level;
		int endgeLines = (int) Math.pow(2, (Math.max(floor - 1, 0)));
		int firstSpaces = (int) Math.pow(2, (floor)) - 1;
		int betweenSpaces = (int) Math.pow(2, (floor + 1)) - 1;

		BTreePrinter.printWhitespaces(firstSpaces);

		List<Node<T>> newNodes = new ArrayList<Node<T>>();
		for (Node<T> node : nodes) {
			if (node != null) {
				System.out.print(node.value);
				newNodes.add(node.left);
				newNodes.add(node.right);
			} else {
				newNodes.add(null);
				newNodes.add(null);
				System.out.print(" ");
			}

			BTreePrinter.printWhitespaces(betweenSpaces);
		}
		System.out.println("");

		for (int i = 1; i <= endgeLines; i++) {
			for (int j = 0; j < nodes.size(); j++) {
				BTreePrinter.printWhitespaces(firstSpaces - i);
				if (nodes.get(j) == null) {
					BTreePrinter.printWhitespaces(endgeLines + endgeLines + i + 1);
					continue;
				}

				if (nodes.get(j).left != null)
					System.out.print("/");
				else
					BTreePrinter.printWhitespaces(1);

				BTreePrinter.printWhitespaces(i + i - 1);

				if (nodes.get(j).right != null)
					System.out.print("\\");
				else
					BTreePrinter.printWhitespaces(1);

				BTreePrinter.printWhitespaces(endgeLines + endgeLines - i);
			}

			System.out.println("");
		}

		printNodeInternal(newNodes, level + 1, maxLevel);
	}

	private static void printWhitespaces(int count) {
		for (int i = 0; i < count; i++)
			System.out.print(" ");
	}

	private static <T extends Comparable<?>> int maxLevel(Node<T> node) {
		if (node == null)
			return 0;

		return Math.max(BTreePrinter.maxLevel(node.left), BTreePrinter.maxLevel(node.right)) + 1;
	}

	private static <T> boolean isAllElementsNull(List<T> list) {
		for (Object object : list) {
			if (object != null)
				return false;
		}

		return true;
	}

}
