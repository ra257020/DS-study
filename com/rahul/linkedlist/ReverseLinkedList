package com.rahul.linkedlist;

public class ReverseLinkedList {

  public static void main(String args[]) {
    int[] values = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    int[] nullValues = null;
    int[] oneValue = {5};
    int[] twoValues = {5, 8};

    Node head = getLinkedList(values);
    if (head == null) {
      System.out.println("Linked List is null");
      return;
    }
    printLinkedList(head);
    Node reversedHead = getReversedLinkedList(head);
    printLinkedList(reversedHead);

  }

  public static void printLinkedList(Node head) {
    if (head == null) {
      System.out.println("Linked List Empty");
      return;
    }

    Node nextNodeToBePrinted = head;  // initially
    do {
      System.out.print(nextNodeToBePrinted.value + " -> ");
    } while ((nextNodeToBePrinted = nextNodeToBePrinted.next)
        != null);  // iterate through the linked list until next node is null;
    System.out.println();

  }

  public static Node getLinkedList(int[] values) {

    if (values == null) {
      return null;
    }
    Node head = null;
    Node tail = null;

    Node headNode = new Node(values[0]);
    head = headNode;
    tail = headNode;

    for (int i = 1; i < values.length; i++) {
      Node node = new Node(values[i]);
      tail.next = node;
      tail = node;
    }
    return head;
  }

  public static Node getReversedLinkedList(Node head) {

    if (head == null) {
      System.out.println("Linked list empty");
      return null;
    } else if (head.next == null) {
      return head;
    }

    Node previous = null;
    Node current = head;
    Node next = head.next;

    while (true) {

      //reverse pointers.
      current.next = previous;

      // return if we reached the end.
      if (next == null) {
        return current;
      }

      // otherwise, keep shifting pointers one ahead.
      previous = current;
      current = next;
      next = next.next;


    }

  }

  static class Node {

    int value;
    Node next;

    Node(int value) {
      this.value = value;
    }

    public void setNext(Node next) {
      this.next = next;
    }
  }

}

